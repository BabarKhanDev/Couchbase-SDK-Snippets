{
    "Full Text Search": {
        "prefix": ["@cbfts"],
        "body": ["try {","    final SearchResult result = ${1:cluster}.searchQuery(\"${2:search-index}\", SearchQuery.queryString(\"${3:query-string}\"));","","    for (SearchRow row : result.rows()) {","      System.out.println(\"Found row: \" + row);","    }","","    System.out.println(\"Reported total rows: \" + result.metaData().metrics().totalRows());","} catch (CouchbaseException ex) {","    ex.printStackTrace();","}"],
        "description": "Use a query string on the Full Text Search Service of your Couchbase Cluster."
    },
    "Full Text Search With all Options and Search Queries": {
        "prefix": ["@cbftsopts"],
        "body": ["//All Search Queries","//queryString(String query) - Accept query strings, which express query-requirements in a special syntax.","//match(String match) - A match query analyzes input text, and uses the results to query an index.","//matchPhrase(String matchPhrase) - The input text is analyzed, and a phrase query is built with the terms resulting from the analysis.","//prefix(String prefix) - A prefix query finds documents containing terms that start with the specified prefix.","//regexp(String regexp) - A regexp query finds documents containing terms that match the specified regular expression.","//termRange() - A term range query finds documents containing a term in the specified field within the specified range.","//numericRange() - A numeric range query finds documents containing a numeric value in the specified field within the specified range.","//dateRange() - A date range query finds documents containing a date value, in the specified field within the specified range.","//disjuncts(SearchQuery…​ queries) - A disjunction query contains multiple child queries. Its result documents must satisfy a configurable min number of child queries.","//conjuncts(SearchQuery…​ queries) - A conjunction query contains multiple child queries. Its result documents must satisfy all of the child queries.","//wildcard(String wildcard) - A wildcard query uses a wildcard expression, to search within individual terms for matches.","//docId(String…​ docIds) - A doc ID query returns the indexed document or documents among the specified set.","//booleanField(boolean value) - A boolean field query searches fields that contain boolean true or false values.","//term(String term) - Performs an exact match in the index for the provided term.","//phrase(String…​ terms) - A phrase query searches for terms occurring in the specified position and offsets.","//matchAll() - Matches all documents in an index, irrespective of terms.","//matchNone() - Matches no documents in the index.","//geoBoundingBox(double topLeftLon, double topLeftLat, double bottomRightLon, double bottomRightLat) - Searches inside the given bounding box coordinates.","//geoDistance(double locationLon, double locationLat, String distance) - Searches inside the distance from the given location coordinate.","try {","    SearchResult result = ${1:cluster}.searchQuery(\"${2:search-index}\", SearchQuery.queryString(\"${3:query-string}\"),","        searchOptions().skip(${4:int}).limit(${5:int}).explain(${6:boolean}).scanConsistency(${7:SearchScanConsistency}).consistentWith(${8:MutationState}).highlight(${9:HighlightStyle, String…}​).sort(${10:Object}).facets(${11:Map<String, SearchFacet>}).fields(${12:String…​}).serializer(${13:JsonSerializer}).raw(${14:String, Object}).collections(${15:String…​}));","","    for (SearchRow row : result.rows()) {","        System.out.println(\"Found row: \" + row);","    }","","    System.out.println(\"Reported total rows: \" + result.metaData().metrics().totalRows());",""    ,"} catch (CouchbaseException ex) {","    ex.printStackTrace();","}"],
        "description": "Create a FTS query that has all available search queries and options shown to you. You can substitute the search query with any of the commented ones."
    },
    "Full Text Search Import": {
        "prefix": ["@cbftsimp"],
        "body": [],
        "description": "Import all necessary FTS namespaces"
    },
    "Full Text Search Example": {
        "prefix": ["@cbftsex"],
        "body": [],
        "description": "Example code that shows connecting to a cluster and running an FTS query on it."
    }
}