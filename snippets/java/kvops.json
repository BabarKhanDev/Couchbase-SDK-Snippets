{
    "Upsert Document": {
        "prefix": ["@cbups"],
        "body": ["JsonObject content = JsonObject.create()","    .put(\"${1:key}\", \"${2:value}\")","","MutationResult result = ${3:collection}.upsert(\"${4:document-key}\", content);"],
        "description": "Create a JSON object and upsert it to a collection."
    },
    "Insert Document": {
        "prefix": ["@cbins"],
        "body": ["try {","    JsonObject content = JsonObject.create()","        .put(\"${1:key}\", \"${2:value}\");","    MutationResult insertResult = ${3:collection}.insert(\"${4:document-key}\", content);","} catch (DocumentExistsException ex) {","    System.err.println(\"The document already exists!\");","} catch (CouchbaseException ex) {","    System.err.println(\"Something else happened: \" + ex);","}"],
        "description": "Create a JSON object and insert it to a collection, this will fail if a document with the same key already exists."
    },
    "Replace Document": {
        "prefix": ["@cbrep"],
        "body": ["for(int i = 0; i < ${1:maxAttempts}; i++) {","    GetResult found = ${2:collection}.get(\"${3:document-key}\");","    JsonObject content = found.contentAsObject();","","    try {","        ${2:collection}.replace(\"${3:document-key}\", ${4:JsonObject-Document}, replaceOptions().cas(found.cas()));","        break; // if successful, break out of the retry loop","    } catch (CasMismatchException ex) {","        // don't do anything, we'll retry the loop","    }","}"],
        "description": "Use an existing JsonObject document replace an existing document in a collection, this will retry if there is a cas mismatch."
    },
    "Get Document": {
        "prefix": ["@cbget"],
        "body": ["try {","    GetResult getResult = ${1:collection}.get(\"${2:document-key}\");","    JsonObject content = getResult.contentAsObject()","} catch (DocumentNotFoundException ex) {","    System.out.println(\"Document not found!\");","}"],
        "description": "Use a key to get a JSON object from a collection and assign it to a JSON object, this will fail if no document with the specified key exists."
    },
    "Remove Document": {
        "prefix": ["@cbrem"],
        "body": ["try {","    ${1:collection}.remove(\"${2:document-key}\");","} catch (DocumentNotFoundException ex) {","    System.out.println(\"Document did not exist when trying to remove\");","}"],
        "description": "Use a key to remove a document from a collection, this will fail if no document with the specified key exists."
    },
    "KV Import": {
        "prefix": ["@cbkvimp"],
        "body": ["import static com.couchbase.client.java.kv.GetOptions.getOptions;","import static com.couchbase.client.java.kv.InsertOptions.insertOptions;","import static com.couchbase.client.java.kv.ReplaceOptions.replaceOptions;","import static com.couchbase.client.java.kv.UpsertOptions.upsertOptions;","","import java.time.Duration;","import java.time.Instant;","import java.time.Period;","import java.util.Optional;","","import com.couchbase.client.core.error.CasMismatchException;","import com.couchbase.client.core.error.CouchbaseException;","import com.couchbase.client.core.error.DocumentExistsException;","import com.couchbase.client.core.error.DocumentNotFoundException;","import com.couchbase.client.core.error.DurabilityImpossibleException;","import com.couchbase.client.core.error.ReplicaNotConfiguredException;","import com.couchbase.client.core.msg.kv.DurabilityLevel;","import com.couchbase.client.java.AsyncCollection;","import com.couchbase.client.java.Bucket;","import com.couchbase.client.java.Cluster;","import com.couchbase.client.java.Collection;","import com.couchbase.client.java.ReactiveCollection;","import com.couchbase.client.java.Scope;","import com.couchbase.client.java.json.JsonObject;","import com.couchbase.client.java.kv.GetResult;","import com.couchbase.client.java.kv.MutationResult;","import com.couchbase.client.java.kv.PersistTo;","import com.couchbase.client.java.kv.ReplicateTo;"],
        "description": "Import all necessary KV namespace."
    },
    "KV Example": {
        "prefix": ["@cbkvex"],
        "body": ["import static com.couchbase.client.java.kv.GetOptions.getOptions;","import static com.couchbase.client.java.kv.InsertOptions.insertOptions;","import static com.couchbase.client.java.kv.ReplaceOptions.replaceOptions;","import static com.couchbase.client.java.kv.UpsertOptions.upsertOptions;","","import java.time.Duration;","import java.time.Instant;","import java.time.Period;","import java.util.Optional;","","import com.couchbase.client.core.error.CasMismatchException;","import com.couchbase.client.core.error.CouchbaseException;","import com.couchbase.client.core.error.DocumentExistsException;","import com.couchbase.client.core.error.DocumentNotFoundException;","import com.couchbase.client.core.error.DurabilityImpossibleException;","import com.couchbase.client.core.error.ReplicaNotConfiguredException;","import com.couchbase.client.core.msg.kv.DurabilityLevel;","import com.couchbase.client.java.AsyncCollection;","import com.couchbase.client.java.Bucket;","import com.couchbase.client.java.Cluster;","import com.couchbase.client.java.Collection;","import com.couchbase.client.java.ReactiveCollection;","import com.couchbase.client.java.Scope;","import com.couchbase.client.java.json.JsonObject;","import com.couchbase.client.java.kv.GetResult;","import com.couchbase.client.java.kv.MutationResult;","import com.couchbase.client.java.kv.PersistTo;","import com.couchbase.client.java.kv.ReplicateTo;","","//Insert a document","try {","    JsonObject content = JsonObject.create()","        .put(\"foo\", \"bar\");","    MutationResult insertResult = ${1:collection}.insert(\"${2:document-key}\", content);","} catch (DocumentExistsException ex) {","    System.err.println(\"The document already exists!\");","} catch (CouchbaseException ex) {","    System.err.println(\"Something else happened: \" + ex);","}","","//Upsert a document","JsonObject content = JsonObject.create()","    .put(\"bar\", \"foo\");","","MutationResult result = ${1:collection}.upsert(\"${2:document-key}\", content);","","//Get a document","try {","    GetResult getResult = ${1:collection}.get(\"${2:document-key}\");","    JsonObject content = getResult.contentAsObject()","} catch (DocumentNotFoundException ex) {","    System.out.println(\"Document not found!\");","}","","//Replace a document","JsonObject document = JsonObject.create()","    .put(\"foobar\", \"barfoo\");","for(int i = 0; i < 10; i++) {","    GetResult found = ${1:collection}.get(\"${2:document-key}\");","    JsonObject content = found.contentAsObject();","","    try {","        ${1:collection}.replace(\"${2:document-key}\", document, replaceOptions().cas(found.cas()));","        break; // if successful, break out of the retry loop","    } catch (CasMismatchException ex) {","        // don't do anything, we'll retry the loop","    }","}","","//Remove a document","try {","    ${1:collection}.remove(\"${2:document-key}\");","} catch (DocumentNotFoundException ex) {","    System.out.println(\"Document did not exist when trying to remove\");","}"],
        "description": "Example code that shows: inserting, upserting, getting, replacing, and removing a document. Along with all required imports."
    },
    "JSON Transcoder": {
        "prefix": ["@cbtranscoder"],
        "body": ["// User is a simple POJO","// You may wish to replace this with your own object","User user = new User(\"John Smith\", 27);","","Gson gson = new Gson();","String json = gson.toJson(user);","","${1:collection}.upsert(\"john-smith\", json, UpsertOptions.upsertOptions().transcoder(RawJsonTranscoder.INSTANCE));"],
        "description": "Example code that shows how to use a RawJSONTranscoder on an upsert operation."
    },
    "Document Expiration": {
        "prefix": ["@cbsetexp"],
        "body": ["//You can set an expiry value from a Duration when creating a document:","//The expiry may be specified as a Duration only if the provided value is less than 50 years.","MutationResult insertResult = ${1:collection}.insert(\"my-document\", JsonObject.create().put(\"foo\", \"bar\"),","    insertOptions().expiry(Duration.ofHours(2)));","","//For expiration more than 50 years in the future, or if you have already calculated when a document should expire, you can specify the expiry as an Instant:","MutationResult insertResult = ${1:collection}.insert(\"my-document2\", JsonObject.create().put(\"foo\", \"bar\"),","    insertOptions().expiry(Instant.now().plus(Period.ofDays(62))));","","//When getting a document from Couchbase Server, the expiry is not included by default, but it can be requested by setting the withExpiry option to true:","GetResult result = ${1:collection}.get(\"my-document2\", getOptions().withExpiry(true));","Optional<Instant> expiry = result.expiryTime();","System.out.println(\"Expiry of found doc: \" + expiry);","","//Note that when updating the document, special care must be taken to avoid resetting the expiry to zero. If you are using Couchbase Server 7.0 or later, set the preserveExpiry option when updating the document:","${1:collection}.replace(\"my-document2\", JsonObject.create().put(\"bar\", \"foo\"),","    replaceOptions().preserveExpiry(true));","","//Some applications may find getAndTouch useful, which fetches a document while updating its expiry field. It can be used like this:","GetResult result = ${1:collection}.getAndTouch(\"my-document2\", Duration.ofDays(1));"],
        "description": "Example code that shows how to use Document Expiration"
    }
}