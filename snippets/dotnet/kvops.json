{
    "Upsert Document": {
        "prefix": ["@cbupsert"],
        "body": ["var document = new {${1:key1} = \"${2:value1}\",${3:key2} = \"${4:value2}\"};","var result = await collection.UpsertAsync(\"${5:document-key}\", document,","    options =>","    {","        options.Expiry(TimeSpan.FromMinutes(${6:1}));","        options.Durability(PersistTo.${7:One}, ReplicateTo.${8:One});","        options.Timeout(TimeSpan.FromSeconds(${9:5}));","    }",");"],
        "description": "Create a JSON object and upsert it to a collection."
    },
    "Insert Document": {
        "prefix": ["@cbinsert"],
        "body": ["try {","    var document = new {${1:key1} = \"${2:value1}\",${3:key2} = \"${4:value2}\"};","","    var result = await collection.InsertAsync(\"${5:document-key}\", document,","        options =>","        {","            options.Expiry(TimeSpan.FromDays(${6:1}));","            options.Timeout(TimeSpan.FromSeconds(${7:5}));","        }","    );","}","catch (DocumentExistsException) {","    // handle exception","}"],
        "description": "Create a JSON object and insert it to a collection, this will fail if a document with the same key already exists."
    },
    "Replace Document": {
        "prefix": ["@cbreplace"],
        "body": ["var previousResult = await collection.GetAsync(\"${1:document-key}\");","var cas = previousResult.Cas;","","var document = new {${2:key1} = \"${3:value1}\",${4:key2} = \"${5:value2}\"};","","var result = await collection.ReplaceAsync(\"${1:document-key}\", document,","    options =>","    {","        options.Cas(cas);","        options.Expiry(TimeSpan.FromMinutes(${6:1}));","        options.Timeout(TimeSpan.FromSeconds(${7:5}));","    }",");"],
        "description": "Create a JSON object and replace a document in a collection, this will fail if no document with the specified key exists."
    },
    "Retrieve Document": {
        "prefix": ["@cbget"],
        "body": ["var result = await collection.GetAsync(\"${1:string-key}\",","    options =>","    {","        options.Timeout(TimeSpan.FromSeconds(${2:5}));","    }",");","var content = result.ContentAs<string>();"],
        "description": "Use a key to get the value from a collection, and assign it to the variable 'content'. This will fail if no document with the specified key exists."
    },
    "Remove Document": {
        "prefix": ["@cbremove"],
        "body": ["var previousResult = await collection.GetAsync(\"${1:document-key}\");","","await collection.RemoveAsync(\"${2:document-key}\",","    options =>","    {","        options.Cas(previousResult.Cas);","        options.Timeout(TimeSpan.FromSeconds(${3:5}));","    }",");"],
        "description": "Use a key to remove a document from a collection, this will fail if no document with the specified key exists."
    }
}