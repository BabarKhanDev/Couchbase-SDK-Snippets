{
    "Create Collection": {
        "prefix": ["@cbmkcollection"],
        "body": ["try {","  var collectionSpec = new couchbase.CollectionSpec({","    name: '${1:collection-name}',","    scopeName: '${2:scope-name}',","  })","","  await collectionMgr.createCollection(collectionSpec)","} catch (e) {","  if (e instanceof couchbase.CollectionExistsError) {","    console.log('The collection already exists')","  } else if (e instanceof couchbase.ScopeNotFoundError) {","    console.log('The scope does not exist')","  } else {","    throw e","  }","}"],
        "description": "Create a new collection, this requires a collection manager to aleady be present. You can make one with the snippet: @cbmkcollectionmanager"
    },
    "Create Scope": {
        "prefix": ["@cbmkscope"],
        "body": ["try {","  await collectionMgr.createScope('${1:scope-name}')","} catch (e) {","  if (e instanceof couchbase.ScopeExistsError) {","    console.log('The scope already exists')","  } else {","    throw e","  }","}"],
        "description": "Create a new scope, this requires a collection manager to aleady be present. You can make one with the snippet: @cbmkcollectionmanager"
    },
    "Create Bucket": {
        "prefix": ["@cbmkbucket"],
        "body": ["await bucketMgr.createBucket({","  name: '${1:bucket-name}',","  flushEnabled: ${2:false},","  replicaIndex: ${3:false},","  ramQuotaMB: ${4:200},","  numReplicas: ${5:1},","  bucketType: ${6:couchbase.BucketType.Couchbase},","})"],
        "description": "Create a new bucket, this requires a bucket manager to be present, you can create one with @cbmkbucketmanager"
    },
    "Create Index": {
        "prefix": ["@cbmkindex"],
        "body": ["not sure the best way to make this yet"],
        "description": "Create a new query index manager object and an index."
    },
    "Create Collection Manager": {
        "prefix": ["@cbmkcollectionmanager"],
        "body": ["const collectionMgr = ${1:bucket}.collections()"],
        "description": "Create a collection manager on your bucket object."
    },
    "Create Bucket Manager": {
        "prefix": ["@cbmkbucketmanager"],
        "body": ["const bucketMgr = ${1:cluster}.buckets()"],
        "description": "Create a bucket manager on your cluster object."
    }
}