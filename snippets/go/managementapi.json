{
    "Create Collection": {
        "prefix": ["@cbcrcol"],
        "body": ["collection := gocb.CollectionSpec{","    Name:      \"${1:collectionName}\",","    ScopeName: \"${2:scopeName}\",","}","","err = collections.CreateCollection(collection, nil)","if err != nil {","    if errors.Is(err, gocb.ErrCollectionExists) {","        fmt.Println(\"Collection already exists\")","    } else {","        panic(err)","    }","}"],
        "description": "Create a new collection, this requires a collection manager to aleady be present. You can make one with the snippet: @cbmkcollectionmanager"
    },
    "Create Scope": {
        "prefix": ["@cbcrscope"],
        "body": ["err = collections.CreateScope(\"${1:scopeName}\", nil)" ,"if err != nil {","    if errors.Is(err, gocb.ErrScopeExists) {","        fmt.Println(\"Scope already exists\")","    } else {","        panic(err)","    }","}"],
        "description": "Create a new scope, this requires a collection manager to aleady be present. You can make one with the snippet: @cbmkcollectionmanager"
    },
    "Create Bucket": {
        "prefix": ["@cbcrbuck"],
        "body": ["err := ${1:bucketMgr}.CreateBucket(gocb.CreateBucketSettings{","    BucketSettings: gocb.BucketSettings{","        Name:                 \"${2:name}\",","        FlushEnabled:         ${3:false},","        ReplicaIndexDisabled: ${4:true},","        RAMQuotaMB:           ${5:150},","        NumReplicas:          ${6:1},","        BucketType:           ${7:gocb.CouchbaseBucketType},","    },","    ConflictResolutionType: gocb.ConflictResolutionTypeSequenceNumber,","}, nil)","if err != nil {","    panic(err)","}"],
        "description": "Create a new bucket, this requires a bucket manager to be present, you can create one with @cbmkbucketmanager"
    },
    "Create Index": {
        "prefix": ["@cbcrind"],
        "body": ["queryManager := cluster.QueryIndexes()","err := queryManager.CreateIndex(\"${1:bucketName}\" , \"${2:indexName}\" , \"${3:fields}\")","if err != nil {","    panic(err)","}"],
        "description": "Create a new query index manager object and an index."
    },
    "Create Collection Manager": {
        "prefix": ["@cbcolman"],
        "body": ["collections := bucket.Collections()"],
        "description": "Create a collection manager on your bucket object."
    },
    "Create Bucket Manager": {
        "prefix": ["@cbbuckman"],
        "body": ["bucketMgr := ${1:cluster}.Buckets()"],
        "description": "Create a bucket manager on your cluster object."
    },
    "Connect to a Cluster": {
        "prefix": ["@cbclus"],
        "body": ["func main() {","  ${1:cluster}, err := gocb.Connect(","        \"${2:connectionString}\",","       gocb.ClusterOptions{","         Username: \"${3:username}\",","         Password: \"${4:password}\",","     })","   if err != nil {","      panic(err)","   }"],
        "description": "Connect to a cluster and create a new Cluster object"
    },
    "Connect to a Bucket": {
        "prefix": ["@cbbuck"],
        "body": ["// get a bucket reference","${1:bucket} := ${2:cluster}.Bucket(\"${3:bucketName}\")","","// We wait until the bucket is definitely connected and setup.","err = bucket.WaitUntilReady(5*time.Second, nil)","if err != nil {","    panic(err)","}"],
        "description": "Get a bucket reference, and create a new Bucket object, using a cluster object that you can create using @cbcnncluster"
    },
    "Connect to a Scope": {
        "prefix": ["@cbscope"],
        "body": ["${1:scope} := ${2:bucket}.Scope(\"${3:scopeName}\")"],
        "description": "Get a scope reference, and create a new Scope object, using a bucket object that you can create using @cbcnnbucket"
    },
    "Connect to a Collection": {
        "prefix": ["@cbcol"],
        "body": ["${1:collection} := ${2:scope}.Collection(\"${3:collectionName}\")"],
        "description": "Get a collection reference, and create a new Collection object, using a scope object that you can create using @cbcnnscope"
    }
}