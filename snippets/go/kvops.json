{
    "Upsert Document": {
        "prefix": ["@cbupsert"],
        "body": ["expiryResult, err := ${1:collection}.Upsert(\"${2:document-key}\", ${3:&document}, &gocb.UpsertOptions{","    Timeout: ${4:100} * time.Millisecond,","    Expiry:  ${5:60} * time.Second,","    DurabilityLevel: gocb.DurabilityLevel${6:Majority},","})"],
        "description": "Upsert an existing document into a collection with expiry and durability."
    },
    "Insert Document": {
        "prefix": ["@cbinsert"],
        "body": ["resultwithOptions, err := ${1:collection}.Insert(\"${2:document-key}\", ${3:&document}, &gocb.InsertOptions{","    Timeout: ${4:3} * time.Second,","})","if err != nil {","    panic(err)","}"],
        "description": "Inser an existing document into a collection, this will fail if a document with the same key already exists."
    },
    "Replace Document": {
        "prefix": ["@cbreplace"],
        "body": ["updateGetResult, err := ${1:collection}.Get(\"${2:document-key}\", nil)","if err != nil {","    panic(err)","}","","updateResult, err := ${1:collection}.Replace(\"${2:document-key}\", ${3:doc}, &gocb.ReplaceOptions{","    Cas: updateGetResult.Cas(),","})"],
        "description": "Get and replace a document with cas, this will fail if no document with the specified key exists."
    },
    "Retrieve Document": {
        "prefix": ["@cbget"],
        "body": ["getResult, err := ${1:collection}.Get(\"${2:document-key}\", &gocb.GetOptions{","    Timeout: ${3:10} * time.Millisecond,","})","if err != nil {","    panic(err)","}","","var getDoc myDoc","err = getResult.Content(&getDoc)","if err != nil {","    panic(err)","}","fmt.Println(getDoc)"],
        "description": "Use a key to get a document from a collection using timeout, this will fail if no document with the specified key exists."
    },
    "Remove Document": {
        "prefix": ["@cbremove"],
        "body": ["removeResult, err := ${1:collection}.Remove(\"${2:document-key}\", &gocb.RemoveOptions{","    Timeout:         ${3:100} * time.Millisecond,","    DurabilityLevel: gocb.DurabilityLevel${4:Majority},","})","if err != nil {","    panic(err)","}"],
        "description": "Use a key to remove a document from a collection using durability, this will fail if no document with the specified key exists."
    },
    "KV Import": {
        "prefix": ["@cbkvimp"],
        "body": ["import (","    \"fmt\"","    \"time\"","","    \"github.com/couchbase/gocb/v2\"",")"],
        "description": "Import all necessary KV namespace."
    },
    "KV Example": {
        "prefix": ["@cbkvex"],
        "body": [],
        "description": "Example code that shows: inserting, upserting, getting, replacing, and removing a document. Along with all required imports."
    }
}